#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('pubsub:server');
const http = require('http');
const authenticationApp = require('../authenticationApp');

/**
 * Get port from environment and store in Express.
 */

const mainPort = normalizePort(process.env.PORT || '3000');
const authenticationServerPort = normalizePort(4000);
app.set('port', mainPort);
authenticationApp.set('port', authenticationServerPort);
/**
 * Create HTTP server.
 */

const server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(mainPort, ()=>{
  console.log(`web server is on ${mainPort}`);
});
const authServer = http.createServer(authenticationApp);
authServer.listen(authenticationServerPort, ()=>{
  console.log(`authentication server is on ${authenticationServerPort}`);
})
const ALIVE_TIME_MS = 8 * 60 * 1000;
// server.setTimeout(ALIVE_TIME_MS);
// server.timeout = 0;

// The number of milliseconds of inactivity a server needs to wait for additional incoming data,
// after it has finished writing the last response, before a socket will be destroyed.
// server.keepAliveTimeout = ALIVE_TIME_MS;

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof mainPort === 'string'
    ? 'Pipe ' + mainPort
    : 'Port ' + mainPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
